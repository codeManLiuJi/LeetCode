import java.util.Scanner;


public class ManacherTest{
	public static void main(String[] args) {
	Scanner in = new Scanner(System.in);
	int n = Integer.parseInt(in.nextLine());
	String line;
	Manacher str;
	for(int i=0;i<n;i++) {
		line = in.nextLine();
		str = new Manacher(line);
		System.out.println(str.getMaxLen());
		}
	in.close();
	}
}

class Manacher{
	Manacher(String s){
		this.s = s;
		maxlen = h = 0;
		manacher();
	}
	private void manacher(){
		char[] ch = s.toCharArray();
		StringBuilder builder = new StringBuilder();
		for(int i=0;i<ch.length;i++) {
			builder.append("#"+ch[i]);
		}
		s = builder.append("#").toString();		//原字符串中每个字符间插入一个#，保证回文字符串肯定是奇数
		int MaxRight = 0;	//定义访问过的最右端回文字符串位置
		int pos = 0;	//定义访问最右端回文字符串的中间位置
		int[] rl = new int[s.length()];	//保存每个字符所对应的回文串的回文半径
		for(int i=0;i<s.length();i++) {
			if(i<MaxRight) {
				rl[i] = Math.min(rl[pos*2-i],MaxRight-i);	//如果在ManRight的左边，则直接赋值已经访问过的回文串
			}else {
				rl[i]=1;	//若在ManRitht右边则说明无访问过的回文字符串，则赋初始值1
			}
			while(i>=rl[i] && i+rl[i]<s.length() && (s.charAt(i-rl[i])==s.charAt(i+rl[i]))) {
				rl[i]++;	//从已经赋值的回文半径开始扩展到最大的回文字符串
			}
			if (i+rl[i]-1 > MaxRight) {	//更新MaxRight
				MaxRight = i+rl[i]-1;
				pos = i;
			}
			if(maxlen != rl[i]-1) {	//更新maxlen和最长回文串的开始引脚
				maxlen = Math.max(maxlen,rl[i]-1);
				h = i;
			}
		}
	}
	public int getMaxLen() {
		return maxlen;
	}
	public int getIndex() {
		return h;
	} 
	int maxlen,h;
	String s;
}
